var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.088,1,2.215]],["body/controllers/AppController.html",[0,2.025,1,3.642,2,1.45,3,0.336,4,0.292,5,0.292,6,3.756,7,1.45,8,5.494,9,5.494,10,0.415,11,0.027,12,1.02,13,3.276,14,3.756,15,0.336,16,0.08,17,3.756,18,1.931,19,0.022,20,0.022]],["title/modules/AppModule.html",[21,1.088,22,2.215]],["body/modules/AppModule.html",[1,3.052,2,1.272,3,0.203,4,0.176,5,0.176,10,0.479,11,0.027,12,0.615,13,3.084,14,2.264,15,0.203,16,0.048,19,0.015,20,0.015,21,1.499,22,4.302,23,1.164,24,1.256,25,1.477,26,1.477,27,1.256,28,2.533,29,1.477,30,2.264,31,2.264,32,2.264,33,3.084,34,3.371,35,3.371,36,3.371,37,2.838,38,2.148,39,1.477,40,1.359,41,2.685,42,2.148,43,2.685,44,2.685,45,2.685,46,2.685,47,1.614,48,1.164,49,1.573,50,2.685,51,1.464,52,2.685,53,1.78,54,1.477,55,2.685,56,2.685,57,1.614,58,2.685,59,2.685,60,2.685,61,0.53,62,3.907,63,2.685,64,2.685,65,2.685,66,2.685,67,2.685,68,2.349,69,2.685,70,2.685,71,1.477,72,1.987,73,2.685,74,2.769,75,2.685,76,2.685,77,2.264,78,2.685]],["title/injectables/AppService.html",[13,1.838,79,1.253]],["body/injectables/AppService.html",[3,0.319,4,0.277,5,0.277,7,1.375,10,0.319,11,0.027,12,0.967,13,2.923,15,0.319,16,0.076,19,0.021,20,0.021,79,1.992,80,2.322,81,3.56,82,6.421,83,4.481,84,5.314,85,4.481,86,5.314,87,0.713,88,2.304,89,0.898,90,4.222,91,1.83,92,1.992,93,1.701,94,4.222,95,4.222]],["title/controllers/AuthController.html",[0,1.088,96,2.215]],["body/controllers/AuthController.html",[0,1.424,2,1.424,3,0.33,4,0.287,5,0.287,10,0.446,11,0.027,12,1.001,15,0.33,16,0.079,18,1.896,19,0.022,20,0.022,96,3.601,97,3.688,98,2.63,99,4.581,100,2.99,101,3.688,102,1.896,103,3.237,104,4.374,105,2.213,106,2.406,107,2.899,108,2.213]],["title/modules/AuthModule.html",[21,1.088,33,1.838]],["body/modules/AuthModule.html",[2,1.603,3,0.283,4,0.246,5,0.246,10,0.441,11,0.027,12,0.859,15,0.283,16,0.067,19,0.02,20,0.02,21,1.79,23,1.626,24,1.754,25,2.063,26,2.063,27,1.754,28,3.024,29,3.024,33,3.488,37,2.492,38,2.708,39,2.063,40,1.898,42,2.063,96,3.644,100,3.371,101,3.163,109,3.163,110,3.163,111,3.163,112,3.751,113,3.264,114,3.751,115,3.163]],["title/injectables/AuthService.html",[79,1.253,100,1.691]],["body/injectables/AuthService.html",[3,0.245,4,0.213,5,0.213,10,0.337,11,0.027,12,0.744,15,0.245,16,0.058,18,1.409,19,0.018,20,0.018,49,2.059,61,0.883,68,3.074,72,2.405,74,1.954,79,1.676,80,1.787,87,0.549,88,1.938,89,1.088,91,1.938,92,2.292,93,1.801,100,2.263,102,2.503,103,2.405,105,2.263,106,1.787,107,2.154,108,1.644,113,2.154,116,2.74,117,3.02,118,5.508,119,5.113,120,3.25,121,3.25,122,2.091,123,1.676,124,1.562,125,4.472,126,3.25,127,2.405,128,4.472,129,2.059,130,1.916,131,3.25,132,1.954,133,2.74,134,2.154,135,2.74,136,3.25,137,1.644,138,3.25,139,3.25]],["title/classes/CreatePostMetaOptionsDto.html",[16,0.06,140,2.01]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.332,4,0.288,5,0.288,10,0.332,11,0.026,15,0.332,16,0.098,19,0.022,20,0.022,61,0.867,87,0.742,89,0.935,92,2.042,140,3.275,141,1.77,142,3.611,143,3.705,144,1.903,145,4.993,146,1.431,147,4.394,148,4.394,149,4.594,150,3.275,151,2.642,152,2.642,153,2.055]],["title/classes/CreatePostsDto.html",[16,0.06,154,1.838]],["body/classes/CreatePostsDto.html",[3,0.138,4,0.12,5,0.12,7,1.877,10,0.364,11,0.027,15,0.138,16,0.065,19,0.012,20,0.012,51,2.223,61,1.184,74,2.898,87,0.309,89,1.117,92,1.968,124,1.017,129,1.822,130,1.696,141,0.736,144,1.017,146,1.71,150,2.183,151,2.491,152,1.099,153,0.855,154,1.602,155,1.541,156,2.687,157,3.062,158,3.885,159,2.687,160,3.885,161,2.687,162,2.687,163,3.632,164,4.143,165,2.491,166,4.143,167,1.828,168,1.828,169,3.065,170,1.828,171,1.828,172,2.913,173,2.913,174,2.913,175,1.828,176,1.828,177,1.828,178,2.456,179,2.456,180,2.456,181,1.828,182,1.828,183,1.828,184,3.632,185,1.828,186,1.828,187,1.828,188,2.456,189,2.456,190,1.828,191,1.828,192,1.751,193,3.632,194,1.828,195,1.828,196,3.493,197,3.062,198,2.439,199,1.828,200,1.828,201,1.212,202,4.143,203,1.828,204,1.828,205,2.155,206,2.913,207,2.278,208,1.541,209,1.541,210,1.541,211,1.937,212,1.828,213,2.999,214,3.348,215,0.855,216,4.143,217,1.751,218,1.828,219,1.353,220,2.913,221,4.143,222,1.828,223,1.828,224,1.541,225,1.828,226,1.828,227,0.925,228,1.828,229,2.456,230,2.456,231,1.212,232,1.828,233,1.541,234,1.828,235,1.541,236,1.828,237,1.828,238,1.828]],["title/classes/CreateTagDto.html",[16,0.06,239,2.473]],["body/classes/CreateTagDto.html",[3,0.224,4,0.195,5,0.195,7,1.587,10,0.317,11,0.027,15,0.224,16,0.075,19,0.017,20,0.017,61,1.103,87,0.502,89,1.189,92,2.354,123,1.827,141,1.197,144,1.467,146,1.82,149,3.543,150,2.93,151,3.185,152,1.787,153,1.39,198,2.126,207,2.914,208,2.506,213,3.231,214,3.92,215,1.39,239,3.109,240,2.506,241,4.11,242,4.11,243,4.713,244,2.972,245,2.972,246,2.972,247,2.972,248,2.972,249,2.972,250,2.972,251,2.972,252,2.972,253,3.92,254,3.92,255,3.109,256,4.202,257,4.202,258,4.202,259,4.202,260,4.202,261,2.972,262,2.972,263,4.202,264,2.199,265,2.972,266,2.972,267,2.972,268,2.972,269,2.972,270,2.972]],["title/classes/CreateUserDto.html",[16,0.06,211,1.563]],["body/classes/CreateUserDto.html",[3,0.156,4,0.136,5,0.136,7,1.874,10,0.243,11,0.026,15,0.156,16,0.071,19,0.013,20,0.013,61,1.136,68,3.577,87,0.35,89,1.022,92,2.417,93,1.295,123,1.801,127,1.534,130,1.906,132,2.889,137,1.049,141,0.835,144,1.123,146,1.565,150,1.934,151,2.889,152,1.934,153,0.969,198,2.912,207,1.769,211,1.843,213,3.37,215,0.969,219,1.534,227,1.049,253,2.38,255,2.38,264,1.534,271,1.534,272,3.285,273,2.916,274,2.916,275,4.806,276,3.744,277,3.744,278,3.744,279,4.052,280,2.712,281,2.073,282,2.073,283,2.712,284,2.073,285,2.073,286,2.712,287,2.712,288,2.073,289,2.073,290,2.712,291,2.712,292,2.073,293,2.073,294,2.073,295,2.712,296,2.712,297,2.712,298,2.712,299,2.712,300,2.712,301,4.624,302,3.744,303,2.712,304,2.712,305,2.712,306,2.073,307,2.712,308,3.323,309,2.712,310,2.712,311,1.748,312,1.748,313,1.748,314,1.748,315,1.748,316,1.246,317,1.374,318,1.748,319,1.748,320,1.748,321,1.748,322,1.748,323,1.748,324,1.748,325,1.748,326,1.748,327,3.323,328,2.712,329,1.748,330,2.712,331,1.748,332,1.748]],["title/classes/GetPostsDto.html",[16,0.06,333,2.01]],["body/classes/GetPostsDto.html",[3,0.321,4,0.279,5,0.279,10,0.403,11,0.027,15,0.321,16,0.105,19,0.021,20,0.021,61,1.153,87,0.719,89,0.906,124,1.866,129,2.352,130,2.189,141,1.715,144,1.866,146,1.387,153,1.992,201,2.823,205,3.954,207,2.939,333,3.213,334,3.591,335,4.259,336,4.259]],["title/classes/GetUsersDto.html",[16,0.06,337,2.01]],["body/classes/GetUsersDto.html",[3,0.298,4,0.259,5,0.259,7,1.286,10,0.425,11,0.027,15,0.298,16,0.101,19,0.02,20,0.02,49,2.051,61,1.113,87,0.667,89,0.84,124,1.778,129,2.482,130,2.112,141,1.59,144,1.778,146,1.286,153,1.846,198,2.577,201,2.617,205,3.768,207,2.8,214,3.768,215,1.846,337,3.061,338,3.329,339,3.948,340,5.092,341,3.948,342,3.948,343,3.948]],["title/classes/MatchPasswordsConstraint.html",[16,0.06,317,2.215]],["body/classes/MatchPasswordsConstraint.html",[3,0.185,4,0.161,5,0.161,7,1.685,10,0.275,11,0.026,15,0.185,16,0.078,19,0.014,20,0.014,61,1.109,68,3.379,87,0.413,88,1.582,89,0.777,91,1.582,92,2.381,93,1.47,122,1.707,123,1.939,124,1.275,127,2.701,130,1.636,132,2.195,137,1.239,141,0.986,150,2.195,151,3.11,152,2.195,153,1.145,198,2.618,207,2.007,211,1.707,213,3.596,215,1.145,219,3.229,227,1.239,253,1.812,255,1.812,264,1.812,271,1.812,272,3.229,273,1.812,274,1.812,276,3.078,277,3.078,278,3.078,279,3.68,280,2.065,283,2.065,286,2.065,287,2.065,290,2.065,291,2.065,295,2.065,296,2.065,297,2.065,298,2.065,299,2.065,300,2.065,301,4.079,302,3.078,303,2.065,304,2.065,305,2.065,307,3.078,308,4.739,309,3.078,310,3.68,311,2.065,312,2.065,313,2.065,314,2.065,315,2.065,316,1.472,317,2.419,318,3.078,319,3.078,320,4.079,321,2.065,322,2.065,323,2.065,324,3.078,325,2.065,326,2.065,327,3.68,328,3.078,329,2.065,330,3.078,331,2.065,332,2.065,344,3.65,345,2.449,346,2.449]],["title/entities/MetaOption.html",[347,1.253,348,1.838]],["body/entities/MetaOption.html",[3,0.265,4,0.23,5,0.23,10,0.265,11,0.027,15,0.265,16,0.063,19,0.019,20,0.019,54,3.261,61,1.171,71,1.929,87,0.592,89,1.209,92,1.765,129,2.142,130,1.765,144,1.645,145,4.484,146,1.851,192,3.418,227,2.383,347,1.765,348,2.59,349,3.261,350,2.957,351,4.484,352,4.484,353,4.484,354,3.507,355,3.525,356,3.507,357,2.595,358,4.71,359,3.485,360,3.507,361,4.484,362,3.507,363,3.122,364,2.957,365,1.64]],["title/controllers/MetaOptionsController.html",[0,1.088,366,2.215]],["body/controllers/MetaOptionsController.html",[0,1.217,2,1.217,3,0.282,4,0.245,5,0.245,10,0.414,11,0.027,12,0.855,15,0.282,16,0.067,18,1.62,19,0.019,20,0.019,51,2.057,53,2.476,54,2.701,61,0.738,87,0.631,88,2.129,89,0.795,91,1.62,93,1.505,98,2.246,105,1.891,108,1.891,117,2.777,122,1.747,123,1.4,124,1.305,140,3.505,142,2.476,146,1.217,165,2.246,349,2.701,366,3.256,367,3.15,368,4.912,369,4.912,370,3.736,371,3.736,372,4.912,373,3.15,374,2.701,375,3.15,376,3.15,377,3.736,378,3.736,379,3.736,380,3.736]],["title/modules/MetaOptionsModule.html",[21,1.088,34,2.01]],["body/modules/MetaOptionsModule.html",[2,1.62,3,0.287,4,0.25,5,0.25,10,0.46,11,0.027,12,0.872,15,0.287,16,0.068,19,0.02,20,0.02,21,1.804,23,1.651,24,1.781,25,2.095,26,2.095,27,1.781,28,3.047,29,2.095,34,3.757,38,2.736,39,2.095,40,1.928,42,2.095,47,2.29,48,1.651,53,3.297,54,2.095,348,2.095,349,2.095,366,3.672,374,3.437,375,3.212,376,3.212,381,3.212,382,3.212,383,3.809,384,3.809,385,2.819,386,3.809]],["title/classes/PatchUserDto.html",[16,0.06,387,2.215]],["body/classes/PatchUserDto.html",[3,0.352,4,0.306,5,0.306,10,0.427,11,0.027,15,0.352,16,0.084,19,0.022,20,0.022,141,1.88,211,2.183,387,3.747,388,3.936,389,4.767,390,5.654,391,3.936,392,3.936,393,3.936,394,4.668]],["title/entities/Post.html",[51,1.253,347,1.253]],["body/entities/Post.html",[3,0.183,4,0.159,5,0.159,10,0.389,11,0.027,15,0.183,16,0.044,19,0.014,20,0.014,49,1.939,51,1.358,54,1.333,61,1.23,71,1.333,87,0.409,89,1.253,92,2.159,124,1.265,129,1.747,130,1.358,144,1.265,146,1.917,156,3.21,157,3.658,158,4.261,159,3.21,160,4.261,161,3.21,162,3.21,192,2.178,196,4.059,209,2.044,210,2.044,229,2.044,230,4.856,347,1.358,348,3.081,349,1.333,355,2.875,357,3.562,363,3.415,365,1.134,385,1.794,395,2.044,396,3.055,397,2.424,398,2.424,399,3.055,400,2.681,401,3.623,402,2.424,403,2.424,404,2.424,405,4.813,406,3.623,407,2.424,408,4.338,409,2.424,410,2.424,411,3.623,412,2.424,413,2.424,414,3.623,415,3.623,416,3.623,417,2.424,418,2.424,419,2.424,420,2.424,421,2.424]],["title/controllers/PostController.html",[0,1.088,422,2.215]],["body/controllers/PostController.html",[0,0.812,2,0.812,3,0.188,4,0.163,5,0.163,7,1.204,10,0.427,11,0.027,12,0.571,15,0.188,16,0.045,18,1.603,19,0.015,20,0.015,49,1.965,51,1.653,61,0.871,87,0.421,88,1.603,89,0.938,91,1.912,93,1.776,98,1.499,102,1.912,103,1.844,105,1.261,106,2.034,107,2.452,108,1.872,117,3.002,122,2.062,123,1.653,124,1.54,137,1.261,146,1.436,154,2.684,165,1.499,215,1.166,217,1.499,333,3.283,422,2.452,423,2.102,424,3.699,425,3.699,426,5.212,427,3.699,428,2.493,429,3.119,430,2.493,431,2.493,432,2.493,433,3.455,434,3.719,435,2.493,436,2.493,437,2.493,438,3.699,439,2.493,440,4.115,441,2.493,442,3.699,443,3.719,444,3.699,445,2.493,446,2.493,447,3.119,448,2.102,449,2.425,450,2.102,451,2.493,452,3.119,453,3.119,454,3.119,455,2.102,456,2.493,457,2.493,458,2.493,459,2.493,460,2.493,461,3.699,462,2.493,463,2.493,464,2.493,465,2.102,466,2.493,467,2.493,468,2.493,469,2.493,470,2.493]],["title/modules/PostModule.html",[21,1.088,35,2.01]],["body/modules/PostModule.html",[2,1.537,3,0.266,4,0.231,5,0.231,10,0.461,11,0.027,12,0.806,15,0.266,16,0.063,19,0.019,20,0.019,21,1.735,23,1.526,24,1.646,25,1.936,26,1.936,27,1.646,28,2.93,29,2.93,35,3.864,37,3.093,38,2.597,39,1.936,40,1.781,42,2.597,47,2.116,48,1.526,51,1.319,115,2.968,422,3.531,449,3.629,450,2.968,471,2.968,472,2.968,473,3.52,474,2.968,475,3.52,476,3.52,477,2.968,478,3.52]],["title/injectables/PostServices.html",[79,1.253,449,1.838]],["body/injectables/PostServices.html",[3,0.187,4,0.163,5,0.163,10,0.392,11,0.028,12,0.568,15,0.187,16,0.045,18,1.075,19,0.015,20,0.015,48,1.075,51,2.22,61,0.727,79,1.381,80,1.364,87,0.419,88,1.597,89,0.784,91,2.11,93,1.484,105,1.865,106,1.364,108,1.255,117,2.463,122,1.723,123,1.381,124,1.287,129,1.771,134,1.644,137,1.255,154,2.677,156,3.254,159,3.254,161,1.835,165,3.277,169,4.29,192,2.926,217,3.393,254,2.727,316,2.644,333,1.491,347,0.93,365,1.16,447,2.091,449,2.026,455,2.091,477,2.091,479,2.091,480,3.685,481,2.48,482,3.226,483,2.48,484,3.685,485,3.685,486,2.48,487,1.835,488,1.835,489,2.48,490,4.397,491,3.685,492,2.48,493,2.48,494,2.48,495,2.48,496,2.091,497,2.48,498,3.107,499,2.48,500,2.48,501,2.091,502,2.727,503,2.48,504,2.48,505,4.397,506,2.48,507,2.48]],["title/entities/Tag.html",[57,2.01,347,1.253]],["body/entities/Tag.html",[3,0.186,4,0.162,5,0.162,7,1.427,10,0.186,11,0.027,15,0.186,16,0.044,19,0.015,20,0.015,57,2.207,61,1.245,71,1.357,74,3.62,87,0.417,89,1.259,92,2.319,123,1.643,129,1.766,144,1.282,146,1.926,192,3.271,227,2.457,241,3.697,242,3.697,243,3.697,347,1.376,351,3.697,352,3.697,353,3.697,355,2.906,357,3.84,359,4.455,361,3.697,363,3.735,364,3.697,365,1.154,396,4.094,399,4.587,400,4.026,508,2.08,509,4.384,510,2.467,511,2.467,512,2.467,513,3.671,514,2.467,515,2.467,516,3.671,517,4.094,518,2.467,519,2.467,520,3.671,521,2.467,522,2.467,523,2.467,524,2.467,525,2.467,526,2.467,527,2.467,528,2.467,529,2.467]],["title/controllers/TagsController.html",[0,1.088,530,2.215]],["body/controllers/TagsController.html",[0,1.573,2,1.573,3,0.364,4,0.317,5,0.317,10,0.364,11,0.026,12,1.106,15,0.364,16,0.087,19,0.023,20,0.023,98,2.904,162,3.574,530,3.825,531,4.073,532,4.83]],["title/modules/TagsModule.html",[21,1.088,36,2.01]],["body/modules/TagsModule.html",[2,1.779,3,0.333,4,0.289,5,0.289,10,0.468,11,0.027,12,1.01,15,0.333,16,0.079,19,0.022,20,0.022,21,1.779,23,1.913,36,3.285,42,2.427,47,2.654,48,1.913,57,2.654,530,3.933,533,4.414,534,4.414,535,4.414,536,4.414]],["title/entities/User.html",[49,1.346,347,1.253]],["body/entities/User.html",[3,0.222,4,0.192,5,0.192,7,0.956,10,0.222,11,0.026,15,0.222,16,0.053,19,0.016,20,0.016,49,1.678,61,1.141,68,2.911,71,1.615,74,3.168,87,0.496,89,1.23,92,2.348,129,1.95,130,1.561,132,2.911,144,1.455,146,1.882,217,2.505,227,2.925,272,3.583,273,3.583,274,3.583,347,1.561,355,3.209,359,4.494,363,1.946,365,1.373,400,4.636,517,3.513,537,2.476,538,4.166,539,3.513,540,5.564,541,5.269,542,2.936,543,4.166,544,2.936,545,5.269,546,2.936,547,2.936,548,2.936,549,2.936,550,5.564]],["title/injectables/UserServices.html",[79,1.253,102,1.449]],["body/injectables/UserServices.html",[3,0.195,4,0.169,5,0.169,10,0.431,11,0.027,12,0.59,15,0.195,16,0.046,18,1.118,19,0.015,20,0.015,48,1.118,49,1.812,61,0.888,72,1.908,79,1.422,80,1.418,87,0.435,88,1.644,89,0.957,91,1.644,93,1.812,99,2.174,100,2.892,102,1.644,105,1.919,106,2.086,107,1.709,108,1.919,113,1.709,117,2.967,122,2.104,123,1.686,124,1.571,129,1.038,130,1.981,132,1.55,133,2.174,134,1.709,135,2.174,137,1.305,211,2.472,224,2.174,231,1.709,316,2.982,337,2.28,365,1.206,482,3.288,487,1.908,488,1.908,501,2.174,502,3.329,551,2.174,552,3.793,553,3.793,554,2.578,555,4.499,556,2.578,557,3.793,558,2.578,559,3.793,560,2.578,561,4.499,562,2.174,563,2.578,564,2.174,565,2.174,566,2.578,567,2.578,568,2.578,569,2.174,570,2.578,571,2.578,572,2.578,573,2.578,574,2.578,575,2.578,576,2.578,577,2.578,578,2.578,579,2.578,580,4.499,581,2.578,582,2.578]],["title/controllers/UsersController.html",[0,1.088,583,2.215]],["body/controllers/UsersController.html",[0,0.687,2,0.687,3,0.159,4,0.138,5,0.138,7,1.667,10,0.403,11,0.027,12,0.483,15,0.159,16,0.038,17,1.778,18,0.914,19,0.013,20,0.013,51,1.493,61,1.054,87,0.356,88,1.413,89,0.847,91,1.727,93,2.062,98,1.268,102,1.727,117,2.864,122,1.863,123,1.816,124,1.391,130,2.294,146,1.297,165,1.268,169,2.412,197,3.778,198,2.267,211,2.496,215,0.986,217,2.912,227,2.267,231,3.655,337,3.079,387,3.655,429,1.778,434,3.359,440,2.748,443,1.778,448,1.778,452,2.748,453,2.748,454,1.778,465,1.778,496,1.778,562,1.778,565,1.778,569,4.318,583,2.16,584,1.778,585,3.259,586,3.259,587,3.259,588,2.109,589,2.109,590,3.259,591,3.259,592,3.259,593,2.109,594,3.259,595,3.259,596,2.748,597,2.109,598,3.259,599,3.259,600,3.259,601,4.844,602,2.109,603,3.259,604,3.259,605,2.109,606,2.109,607,2.109,608,2.109,609,2.109,610,2.109,611,3.983,612,3.983,613,2.109,614,1.778,615,3.983,616,1.778,617,2.109,618,2.109,619,1.778,620,2.109,621,2.109,622,2.748,623,2.109,624,2.109,625,2.109,626,2.109,627,2.109,628,2.109,629,2.109,630,2.109,631,2.109,632,2.109,633,2.109]],["title/modules/UsersModule.html",[21,1.088,37,1.691]],["body/modules/UsersModule.html",[2,1.56,3,0.271,4,0.236,5,0.236,10,0.464,11,0.027,12,0.824,15,0.271,16,0.065,19,0.019,20,0.019,21,1.754,23,1.56,24,1.682,25,1.979,26,1.979,27,1.682,28,2.962,29,2.962,33,2.635,37,3.177,38,2.635,39,1.979,40,1.821,42,1.979,47,2.163,48,1.56,49,1.449,102,2.87,113,3.176,564,3.034,583,3.57,614,3.034,634,3.034,635,3.034,636,3.034,637,3.598,638,3.598,639,3.598,640,3.598]],["title/coverage.html",[641,3.373]],["body/coverage.html",[0,1.851,1,1.851,5,0.183,6,2.355,11,0.027,13,1.536,16,0.11,19,0.016,20,0.016,27,1.306,49,1.125,51,1.047,54,2.211,57,1.679,61,0.551,79,2.046,81,2.355,83,2.355,96,1.851,97,2.355,100,1.413,102,1.211,116,2.355,140,1.679,142,1.851,143,2.355,154,1.536,155,2.355,211,1.306,239,2.067,240,2.355,271,2.974,317,1.851,333,1.679,334,2.355,337,1.679,338,2.355,347,1.931,348,1.536,349,2.59,350,2.355,366,1.851,367,2.355,374,1.536,387,1.851,388,2.355,395,2.355,422,1.851,423,2.355,433,1.851,449,1.536,479,2.355,508,2.355,530,1.851,531,2.355,537,2.355,539,2.355,551,2.355,583,1.851,584,2.355,622,2.355,641,2.067,642,2.355,643,2.793,644,2.793,645,4.02,646,4.02,647,2.793,648,2.793,649,6.691,650,5.994,651,5.151,652,2.355,653,5.151,654,2.355,655,2.355,656,4.709,657,2.355,658,2.793,659,4.02,660,2.793]],["title/dependencies.html",[24,1.879,661,2.355]],["body/dependencies.html",[11,0.027,12,0.997,16,0.097,19,0.021,20,0.021,24,2.036,48,1.888,153,2.036,201,2.886,215,2.036,365,2.036,616,3.672,662,4.355,663,4.355,664,5.898,665,4.355,666,4.355,667,4.355,668,4.355,669,4.355,670,4.355,671,4.355,672,4.355,673,4.355,674,4.355,675,4.355,676,4.355,677,4.355,678,4.355]],["title/miscellaneous/enumerations.html",[679,1.851,680,3.389]],["body/miscellaneous/enumerations.html",[11,0.027,19,0.021,20,0.021,51,2.019,87,0.729,158,3.987,160,3.987,178,4.543,179,4.543,180,4.543,188,4.543,189,4.543,231,3.571,233,4.543,679,2.861,680,3.639,681,4.316,682,4.316,683,4.316,684,6.621,685,4.316]],["title/miscellaneous/functions.html",[679,1.851,686,3.389]],["body/miscellaneous/functions.html",[11,0.024,19,0.024,20,0.024,27,2.955,87,0.862,652,4.308,679,3.386,686,4.308,687,5.109]],["title/index.html",[87,0.471,688,2.793,689,2.793]],["body/index.html",[4,0.151,7,0.75,11,0.025,19,0.014,20,0.014,40,2.683,77,1.943,85,1.943,134,3.514,198,2.374,482,1.527,596,1.943,619,4.471,641,1.705,642,2.94,690,2.304,691,2.304,692,4.207,693,3.487,694,2.304,695,2.304,696,2.304,697,2.304,698,3.487,699,4.207,700,2.304,701,2.304,702,4.692,703,2.304,704,5.671,705,2.304,706,5.507,707,2.304,708,2.304,709,3.487,710,2.304,711,3.487,712,2.304,713,4.207,714,2.304,715,3.487,716,2.304,717,2.304,718,2.304,719,2.304,720,2.304,721,4.692,722,5.671,723,2.304,724,3.487,725,2.304,726,2.304,727,2.304,728,2.304,729,2.304,730,3.487,731,4.692,732,2.304,733,3.487,734,2.304,735,3.487,736,5.302,737,4.692,738,2.304,739,3.487,740,2.304,741,2.304,742,2.304,743,2.304,744,4.692,745,2.304,746,2.304,747,2.304,748,2.304,749,3.487,750,2.304,751,2.304,752,2.304,753,2.304,754,2.304,755,3.487,756,2.304,757,2.304,758,2.304,759,3.487,760,2.304,761,2.304,762,3.956,763,3.487,764,2.304,765,2.304,766,2.304,767,2.304,768,2.304,769,2.304,770,2.304,771,2.304,772,3.487,773,2.304,774,1.943,775,2.304,776,2.304,777,4.207,778,2.304,779,2.304,780,2.304,781,2.304,782,2.304,783,3.487,784,2.304,785,2.304,786,2.304,787,2.304,788,2.304,789,3.487,790,2.304,791,2.304,792,2.304,793,3.487,794,3.487,795,2.304,796,2.304,797,2.304,798,2.304,799,2.304,800,2.304,801,2.304,802,2.304,803,2.304,804,2.304,805,2.304,806,1.943,807,2.304,808,2.304,809,2.304,810,2.304,811,2.304,812,2.304,813,1.943]],["title/injectables/metaOptionService.html",[79,1.253,374,1.838]],["body/injectables/metaOptionService.html",[3,0.255,4,0.222,5,0.222,10,0.442,11,0.027,12,0.775,15,0.255,16,0.061,18,1.467,19,0.018,20,0.018,48,1.467,53,2.244,61,0.908,79,1.724,80,1.862,87,0.572,88,1.993,89,0.978,91,1.467,93,1.363,105,2.327,106,1.862,108,1.713,117,2.643,122,2.15,123,1.724,124,1.606,137,1.713,140,3.369,142,2.244,316,3.14,347,1.269,348,2.872,349,2.872,365,1.583,373,2.855,374,2.529,385,2.505,482,3.714,487,2.505,488,2.505,502,2.505,654,4.404,655,2.855,814,5.223,815,3.385,816,3.385,817,4.599,818,4.599,819,3.385,820,3.385,821,3.385,822,3.385]],["title/modules.html",[23,1.976]],["body/modules.html",[11,0.022,19,0.022,20,0.022,22,3.036,23,1.985,33,2.519,34,2.753,35,2.753,36,2.753,37,2.318,235,3.862,762,5.43,774,3.862,823,6.44,824,6.44,825,6.551]],["title/overview.html",[826,3.844]],["body/overview.html",[2,1.048,11,0.026,13,2.797,19,0.018,20,0.018,21,1.048,22,4.368,23,1.395,24,1.505,25,1.769,26,1.769,27,1.505,28,1.769,29,1.769,30,2.713,31,2.713,32,2.713,33,3.272,34,3.46,35,3.736,36,3.058,37,3.086,38,2.443,39,1.769,40,1.628,71,1.769,80,1.769,100,3.086,102,2.643,109,2.713,110,2.713,111,2.713,141,1.296,254,2.381,374,2.797,381,2.713,382,2.713,449,3.354,471,2.713,472,2.713,474,2.713,498,2.713,634,2.713,635,2.713,636,2.713,826,2.713,827,4.441,828,3.218]],["title/classes/patchPostsDto.html",[16,0.06,433,2.215]],["body/classes/patchPostsDto.html",[3,0.352,4,0.306,5,0.306,10,0.427,11,0.027,15,0.352,16,0.084,19,0.022,20,0.022,141,1.88,154,2.567,389,4.767,391,3.936,392,3.936,393,3.936,433,3.747,657,3.936,829,5.654,830,4.668]],["title/properties.html",[144,1.404,661,2.355]],["body/properties.html",[7,1.638,11,0.027,19,0.023,20,0.023,144,1.756,806,4.241,813,4.241,831,5.029,832,5.029,833,5.029]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/metaOptionService.html":{},"modules.html":{},"overview.html":{},"classes/patchPostsDto.html":{},"properties.html":{}}}],["0",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":832,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":169,"title":{},"body":{"classes/CreatePostsDto.html":{},"injectables/PostServices.html":{},"controllers/UsersController.html":{}}}],["1.1.26",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":496,"title":{},"body":{"injectables/PostServices.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":513,"title":{},"body":{"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{}}}],["12",{"_index":493,"title":{},"body":{"injectables/PostServices.html":{}}}],["1234",{"_index":343,"title":{},"body":{"classes/GetUsersDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":341,"title":{},"body":{"classes/GetUsersDto.html":{}}}],["150",{"_index":543,"title":{},"body":{"entities/User.html":{}}}],["2",{"_index":491,"title":{},"body":{"injectables/PostServices.html":{}}}],["20",{"_index":541,"title":{},"body":{"entities/User.html":{}}}],["200",{"_index":440,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["2000",{"_index":492,"title":{},"body":{"injectables/PostServices.html":{}}}],["2003",{"_index":499,"title":{},"body":{"injectables/PostServices.html":{}}}],["2011",{"_index":495,"title":{},"body":{"injectables/PostServices.html":{}}}],["255",{"_index":401,"title":{},"body":{"entities/Post.html":{}}}],["256",{"_index":516,"title":{},"body":{"entities/Tag.html":{}}}],["27",{"_index":494,"title":{},"body":{"injectables/PostServices.html":{}}}],["3",{"_index":497,"title":{},"body":{"injectables/PostServices.html":{}}}],["4",{"_index":828,"title":{},"body":{"overview.html":{}}}],["5",{"_index":498,"title":{},"body":{"injectables/PostServices.html":{},"overview.html":{}}}],["50",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":520,"title":{},"body":{"entities/Tag.html":{}}}],["5432",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":827,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":254,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/PostServices.html":{},"overview.html":{}}}],["9!@#$%^&*]{8,16",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["90",{"_index":545,"title":{},"body":{"entities/User.html":{}}}],["9])[a",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["add",{"_index":525,"title":{},"body":{"entities/Tag.html":{}}}],["allowing",{"_index":750,"title":{},"body":{"index.html":{}}}],["alphabets",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["already",{"_index":576,"title":{},"body":{"injectables/UserServices.html":{}}}],["amazing",{"_index":799,"title":{},"body":{"index.html":{}}}],["aminu",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["apioperation",{"_index":452,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":437,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":213,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["apiproperty()@isstring()@isnotempty()@matches(/^[a",{"_index":252,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":248,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({enum",{"_index":177,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apiproperty({example",{"_index":163,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apiproperty({type",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional",{"_index":214,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":250,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":244,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":246,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":339,"title":{},"body":{"classes/GetUsersDto.html":{}}}],["apipropertyoptional({enum",{"_index":187,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apipropertyoptional({example",{"_index":183,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apipropertyoptional({type",{"_index":195,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apiquery",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":453,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":454,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('users",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["app.controller",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":698,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":22,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":13,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["args.object",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["array",{"_index":196,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["async",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}}}],["auth",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserServices.html":{}}}],["auth.controller",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":96,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":33,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":806,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":100,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["authur",{"_index":229,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["autoloadentities",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":235,"title":{},"body":{"classes/CreatePostsDto.html":{},"modules.html":{}}}],["available'})@isnotempty",{"_index":175,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["await",{"_index":502,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}}}],["aws",{"_index":739,"title":{},"body":{"index.html":{}}}],["backers",{"_index":800,"title":{},"body":{"index.html":{}}}],["based",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["board",{"_index":792,"title":{},"body":{"index.html":{}}}],["body",{"_index":165,"title":{},"body":{"classes/CreatePostsDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["bootstrap",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":825,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":823,"title":{},"body":{"modules.html":{}}}],["building",{"_index":693,"title":{},"body":{"index.html":{}}}],["channel",{"_index":765,"title":{},"body":{"index.html":{}}}],["character",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["check",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"index.html":{}}}],["class",{"_index":16,"title":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PatchUserDto.html":{},"classes/patchPostsDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"injectables/metaOptionService.html":{},"classes/patchPostsDto.html":{}}}],["classes",{"_index":141,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PatchUserDto.html":{},"overview.html":{},"classes/patchPostsDto.html":{}}}],["clicks",{"_index":749,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":734,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":381,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":382,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":471,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_exports",{"_index":472,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":473,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":474,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":634,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":635,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":636,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["column",{"_index":363,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column(\"simple",{"_index":418,"title":{},"body":{"entities/Post.html":{}}}],["column(\"varchar",{"_index":550,"title":{},"body":{"entities/User.html":{}}}],["column('simple",{"_index":408,"title":{},"body":{"entities/Post.html":{}}}],["column('timestamp",{"_index":411,"title":{},"body":{"entities/Post.html":{}}}],["column('varchar",{"_index":540,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":357,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["come",{"_index":756,"title":{},"body":{"index.html":{}}}],["compare",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["compodoc/compodoc",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["confirm",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["confirmpassword",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["console.log(createuserdto",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(headers",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}}}],["constructor",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}}}],["constructor(authservice",{"_index":554,"title":{},"body":{"injectables/UserServices.html":{}}}],["constructor(metarepository",{"_index":815,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["constructor(postrepository",{"_index":481,"title":{},"body":{"injectables/PostServices.html":{}}}],["constructor(private",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["constructor(userservice",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["containg",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["contains",{"_index":166,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["content",{"_index":156,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":377,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":457,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":532,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":771,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":641,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":224,"title":{},"body":{"classes/CreatePostsDto.html":{},"injectables/UserServices.html":{}}}],["createdate",{"_index":351,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":353,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmetaoptions",{"_index":814,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["createmetaoptions(createmetaoptions",{"_index":818,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["createpost",{"_index":480,"title":{},"body":{"injectables/PostServices.html":{}}}],["createpost(createposts",{"_index":485,"title":{},"body":{"injectables/PostServices.html":{}}}],["createpostmetaoptionsdto",{"_index":140,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"coverage.html":{},"injectables/metaOptionService.html":{}}}],["createposts",{"_index":447,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostServices.html":{}}}],["createposts.publisheddate",{"_index":504,"title":{},"body":{"injectables/PostServices.html":{}}}],["createpostsdto",{"_index":154,"title":{"classes/CreatePostsDto.html":{}},"body":{"classes/CreatePostsDto.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"coverage.html":{},"classes/patchPostsDto.html":{}}}],["creates",{"_index":438,"title":{},"body":{"controllers/PostController.html":{}}}],["createtagdto",{"_index":239,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":552,"title":{},"body":{"injectables/UserServices.html":{}}}],["createuser(createuserdto",{"_index":557,"title":{},"body":{"injectables/UserServices.html":{}}}],["createuserdto",{"_index":211,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreatePostsDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PatchUserDto.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":577,"title":{},"body":{"injectables/UserServices.html":{}}}],["custum",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["data",{"_index":461,"title":{},"body":{"controllers/PostController.html":{}}}],["database",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":192,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{}}}],["db",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorartor",{"_index":526,"title":{},"body":{"entities/Tag.html":{}}}],["decorators",{"_index":146,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":767,"title":{},"body":{"index.html":{}}}],["default",{"_index":405,"title":{},"body":{"entities/Post.html":{}}}],["defaultmessage",{"_index":344,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["defaultmessage(args",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["defaultvaluepipe",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["delete",{"_index":529,"title":{},"body":{"entities/Tag.html":{}}}],["deletedat",{"_index":509,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":364,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["dependencies",{"_index":24,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":721,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":738,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":730,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":748,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":779,"title":{},"body":{"index.html":{}}}],["discord",{"_index":764,"title":{},"body":{"index.html":{}}}],["dive",{"_index":766,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":642,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":178,"title":{},"body":{"classes/CreatePostsDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/getposts.dto",{"_index":451,"title":{},"body":{"controllers/PostController.html":{}}}],["dtos/patchposts.dto",{"_index":456,"title":{},"body":{"controllers/PostController.html":{}}}],["dtos/postposts.dto",{"_index":455,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostServices.html":{}}}],["dtos/usersdtos/getuser.dto",{"_index":562,"title":{},"body":{"injectables/UserServices.html":{},"controllers/UsersController.html":{}}}],["dtos/usersdtos/patchuser.endpoint",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/usersdtos/postuser.dto",{"_index":565,"title":{},"body":{"injectables/UserServices.html":{},"controllers/UsersController.html":{}}}],["during",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":716,"title":{},"body":{"index.html":{}}}],["each",{"_index":216,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["efficient",{"_index":694,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":728,"title":{},"body":{"index.html":{}}}],["email",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"injectables/UserServices.html":{}}}],["enables",{"_index":527,"title":{},"body":{"entities/Tag.html":{}}}],["ensure",{"_index":726,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":782,"title":{},"body":{"index.html":{}}}],["entire",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["entities",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":347,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{},"injectables/metaOptionService.html":{}}}],["entries",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":230,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":680,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/postsatus.enum",{"_index":210,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":209,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["error",{"_index":579,"title":{},"body":{"injectables/UserServices.html":{}}}],["example",{"_index":198,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exist",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserServices.html":{}}}],["experience",{"_index":769,"title":{},"body":{"index.html":{}}}],["export",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/metaOptionService.html":{},"classes/patchPostsDto.html":{}}}],["exports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":389,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/patchPostsDto.html":{}}}],["extinguisher",{"_index":501,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UserServices.html":{}}}],["false",{"_index":227,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":742,"title":{},"body":{"index.html":{}}}],["fatima",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fatima.aminu@mail.com",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["featuredimage",{"_index":241,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["features",{"_index":752,"title":{},"body":{"index.html":{}}}],["fetches",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["fethched",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":744,"title":{},"body":{"index.html":{}}}],["field",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["field'})@isemail()@maxlength(150",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["field'})@isstring()@isnotempty()@maxlength(90",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["field'})@isstring()@isoptional()@maxlength(90",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"injectables/metaOptionService.html":{},"classes/patchPostsDto.html":{}}}],["find",{"_index":460,"title":{},"body":{"controllers/PostController.html":{}}}],["findall(getusersdto",{"_index":568,"title":{},"body":{"injectables/UserServices.html":{}}}],["findallposts(getpostsdto",{"_index":489,"title":{},"body":{"injectables/PostServices.html":{}}}],["findonebyid",{"_index":553,"title":{},"body":{"injectables/UserServices.html":{}}}],["findonebyid(id",{"_index":559,"title":{},"body":{"injectables/UserServices.html":{}}}],["first",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["firstname",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["focus",{"_index":751,"title":{},"body":{"index.html":{}}}],["follow",{"_index":786,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserServices.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":692,"title":{},"body":{"index.html":{}}}],["full",{"_index":781,"title":{},"body":{"index.html":{}}}],["function",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["functions",{"_index":686,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":747,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":429,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":425,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(@param",{"_index":459,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(getpostsdto",{"_index":428,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostsdto",{"_index":333,"title":{"classes/GetPostsDto.html":{}},"body":{"classes/GetPostsDto.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"coverage.html":{}}}],["getting",{"_index":688,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersdto",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersdto",{"_index":337,"title":{"classes/GetUsersDto.html":{}},"body":{"classes/GetUsersDto.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["graph",{"_index":774,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":796,"title":{},"body":{"index.html":{}}}],["handle",{"_index":578,"title":{},"body":{"injectables/UserServices.html":{}}}],["hands",{"_index":768,"title":{},"body":{"index.html":{}}}],["handy",{"_index":757,"title":{},"body":{"index.html":{}}}],["headers",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":772,"title":{},"body":{"index.html":{}}}],["here",{"_index":804,"title":{},"body":{"index.html":{}}}],["host",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["https://image_url",{"_index":172,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["https://nestjs.com",{"_index":810,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":523,"title":{},"body":{"entities/Tag.html":{}}}],["id",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostsDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserServices.html":{}}}],["identifier",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":174,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["imageurl",{"_index":157,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["implements",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["import",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/metaOptionService.html":{},"classes/patchPostsDto.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["index",{"_index":87,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"injectables/metaOptionService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/metaOptionService.html":{},"classes/patchPostsDto.html":{}}}],["information",{"_index":732,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":754,"title":{},"body":{"index.html":{}}}],["inject",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserServices.html":{}}}],["inject(forwardref",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserServices.html":{}}}],["injectable",{"_index":79,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"coverage.html":{},"injectables/metaOptionService.html":{}}}],["injectables",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{},"overview.html":{}}}],["injecting",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}}}],["injectrepository",{"_index":488,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}}}],["injectrepository(metaoption",{"_index":820,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["injectrepository(post",{"_index":500,"title":{},"body":{"injectables/PostServices.html":{}}}],["injectrepository(user",{"_index":567,"title":{},"body":{"injectables/UserServices.html":{}}}],["install",{"_index":746,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":705,"title":{},"body":{"index.html":{}}}],["instance",{"_index":223,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["instanceof",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":775,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":202,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isauth",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isempty",{"_index":203,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isenum",{"_index":204,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isenum(createuserdto",{"_index":228,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isenum(poststatus",{"_index":234,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isenum(posttype",{"_index":232,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isint",{"_index":205,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{}}}],["isiso8601",{"_index":193,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isjson",{"_index":149,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":150,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isnotempty()@isjson",{"_index":147,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnumber",{"_index":206,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isoptional",{"_index":207,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isoptional()@isint()@type(undefined",{"_index":335,"title":{},"body":{"classes/GetPostsDto.html":{}}}],["isstring",{"_index":151,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isstring({each",{"_index":238,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isurl",{"_index":263,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["item",{"_index":220,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["java",{"_index":236,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["job",{"_index":789,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":791,"title":{},"body":{"index.html":{}}}],["join",{"_index":802,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":414,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":358,"title":{},"body":{"entities/MetaOption.html":{}}}],["kamil",{"_index":807,"title":{},"body":{"index.html":{}}}],["key",{"_index":723,"title":{},"body":{"index.html":{}}}],["last",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["lastname",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["learn",{"_index":760,"title":{},"body":{"index.html":{}}}],["legend",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":400,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["letters",{"_index":257,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["license",{"_index":813,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":794,"title":{},"body":{"index.html":{}}}],["likes",{"_index":490,"title":{},"body":{"injectables/PostServices.html":{}}}],["limit",{"_index":569,"title":{},"body":{"injectables/UserServices.html":{},"controllers/UsersController.html":{}}}],["link",{"_index":173,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["linkedin",{"_index":788,"title":{},"body":{"index.html":{}}}],["list",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["longer",{"_index":84,"title":{},"body":{"injectables/AppService.html":{}}}],["looking",{"_index":733,"title":{},"body":{"index.html":{}}}],["loop",{"_index":784,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["main",{"_index":164,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["makes",{"_index":740,"title":{},"body":{"index.html":{}}}],["managing",{"_index":753,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":415,"title":{},"body":{"entities/Post.html":{}}}],["match",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matches",{"_index":264,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matches(/^(?=.*[!@#$%^&])(?=.*[a",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matches(/^[a",{"_index":267,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/metaOptionService.html":{},"modules.html":{},"overview.html":{},"classes/patchPostsDto.html":{},"properties.html":{}}}],["matchpasswords",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matchpasswordsconstraint",{"_index":317,"title":{"classes/MatchPasswordsConstraint.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["mau",{"_index":736,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":152,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(1024",{"_index":270,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(150",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(20",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(256",{"_index":266,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":269,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(90",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(98",{"_index":226,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["message",{"_index":255,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["meta",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/metaOptionService.html":{}}}],["metadata",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":348,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"coverage.html":{},"injectables/metaOptionService.html":{}}}],["metaoptions",{"_index":369,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptions(@body",{"_index":379,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptions(metaoptionsdto",{"_index":370,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionscontroller",{"_index":366,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsdto",{"_index":372,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionservice",{"_index":374,"title":{"injectables/metaOptionService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{},"injectables/metaOptionService.html":{},"overview.html":{}}}],["metaoptionsmodule",{"_index":34,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":378,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metarepository",{"_index":817,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["metavalue",{"_index":145,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["minlength",{"_index":208,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{}}}],["minlength(3",{"_index":265,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["minlength(4",{"_index":225,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["miscellaneous",{"_index":679,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":793,"title":{},"body":{"index.html":{}}}],["mode",{"_index":709,"title":{},"body":{"index.html":{}}}],["module",{"_index":21,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":23,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":731,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":808,"title":{},"body":{"index.html":{}}}],["name",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["need",{"_index":780,"title":{},"body":{"index.html":{}}}],["nest",{"_index":699,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":812,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":722,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"injectables/metaOptionService.html":{}}}],["nestjs/core",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":392,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/patchPostsDto.html":{}}}],["nestjs/platform",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":215,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"modules/TagsModule.html":{},"injectables/UserServices.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"injectables/metaOptionService.html":{}}}],["new",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["newpost",{"_index":505,"title":{},"body":{"injectables/PostServices.html":{}}}],["newuser",{"_index":580,"title":{},"body":{"injectables/UserServices.html":{}}}],["node.js",{"_index":691,"title":{},"body":{"index.html":{}}}],["npm",{"_index":704,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":359,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{}}}],["number):promise",{"_index":573,"title":{},"body":{"injectables/UserServices.html":{}}}],["object",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["object.password",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["offer",{"_index":790,"title":{},"body":{"index.html":{}}}],["official",{"_index":737,"title":{},"body":{"index.html":{}}}],["one",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["onetoone",{"_index":416,"title":{},"body":{"entities/Post.html":{}}}],["onetoone(undefined)@joincolumn",{"_index":403,"title":{},"body":{"entities/Post.html":{}}}],["open",{"_index":795,"title":{},"body":{"index.html":{}}}],["optional",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostsDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["options",{"_index":368,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":384,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":367,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:11",{"_index":371,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.entity",{"_index":385,"title":{},"body":{"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"injectables/metaOptionService.html":{}}}],["options.entity.ts",{"_index":350,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["options.entity.ts:13",{"_index":356,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:19",{"_index":360,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:22",{"_index":354,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:25",{"_index":362,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":383,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":376,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":655,"title":{},"body":{"coverage.html":{},"injectables/metaOptionService.html":{}}}],["options.service.ts:15",{"_index":819,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["options.service.ts:8",{"_index":816,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["options/meta",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/provider/meta",{"_index":654,"title":{},"body":{"coverage.html":{},"injectables/metaOptionService.html":{}}}],["optionsdto",{"_index":373,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/metaOptionService.html":{}}}],["optionsdto.ts",{"_index":143,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["optionsdto.ts:6",{"_index":148,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":826,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":661,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":231,"title":{},"body":{"classes/CreatePostsDto.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page'})@isenum(posttype)@isoptional",{"_index":190,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["param",{"_index":448,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["parseintpipe",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["partialtype",{"_index":391,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/patchPostsDto.html":{}}}],["partialtype(createpostsdto",{"_index":829,"title":{},"body":{"classes/patchPostsDto.html":{}}}],["partialtype(createuserdto",{"_index":390,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pass",{"_index":463,"title":{},"body":{"controllers/PostController.html":{}}}],["password",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["password'})@isstring()@maxlength(20)@validate(matchpasswordsconstraint",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["passwords",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["patch",{"_index":434,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchposts",{"_index":426,"title":{},"body":{"controllers/PostController.html":{}}}],["patchposts(@body",{"_index":470,"title":{},"body":{"controllers/PostController.html":{}}}],["patchposts(patchposts",{"_index":432,"title":{},"body":{"controllers/PostController.html":{}}}],["patchpostsdto",{"_index":433,"title":{"classes/patchPostsDto.html":{}},"body":{"controllers/PostController.html":{},"coverage.html":{},"classes/patchPostsDto.html":{}}}],["patchuser",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":387,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["php",{"_index":237,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["platform",{"_index":735,"title":{},"body":{"index.html":{}}}],["please",{"_index":763,"title":{},"body":{"index.html":{}}}],["port",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":729,"title":{},"body":{"index.html":{}}}],["post",{"_index":51,"title":{"entities/Post.html":{}},"body":{"modules/AppModule.html":{},"classes/CreatePostsDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@isoptional()@isint()@type(undefined",{"_index":170,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["post'})@isstring()@isnotempty",{"_index":167,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["post.controller",{"_index":476,"title":{},"body":{"modules/PostModule.html":{}}}],["post.entity",{"_index":477,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostServices.html":{}}}],["post/post.entity",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["post/post.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":422,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postgres",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["postmodule",{"_index":35,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postposts",{"_index":427,"title":{},"body":{"controllers/PostController.html":{}}}],["postposts(@body",{"_index":468,"title":{},"body":{"controllers/PostController.html":{}}}],["postposts(createposts",{"_index":436,"title":{},"body":{"controllers/PostController.html":{}}}],["postposts.dto",{"_index":830,"title":{},"body":{"classes/patchPostsDto.html":{}}}],["postrepository",{"_index":484,"title":{},"body":{"injectables/PostServices.html":{}}}],["posts",{"_index":424,"title":{},"body":{"controllers/PostController.html":{}}}],["posts'})@apiresponse({status",{"_index":439,"title":{},"body":{"controllers/PostController.html":{}}}],["postserices",{"_index":458,"title":{},"body":{"controllers/PostController.html":{}}}],["postservices",{"_index":449,"title":{"injectables/PostServices.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":158,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":421,"title":{},"body":{"entities/Post.html":{}}}],["posttitle",{"_index":159,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{}}}],["posttype",{"_index":160,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.page",{"_index":420,"title":{},"body":{"entities/Post.html":{}}}],["postuser.dto",{"_index":394,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["postusers",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["postusers(@body",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["postusers(createuserdto",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":355,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}}}],["production",{"_index":711,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":690,"title":{},"body":{"index.html":{}}}],["project",{"_index":702,"title":{},"body":{"index.html":{}}}],["promise",{"_index":561,"title":{},"body":{"injectables/UserServices.html":{}}}],["properties",{"_index":144,"title":{"properties.html":{}},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provider/meta",{"_index":375,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/post.service",{"_index":450,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["providers/users.services",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["published",{"_index":180,"title":{},"body":{"classes/CreatePostsDto.html":{},"miscellaneous/enumerations.html":{}}}],["publisheddate",{"_index":161,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{}}}],["query",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":761,"title":{},"body":{"index.html":{}}}],["read",{"_index":803,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["ready",{"_index":720,"title":{},"body":{"index.html":{}}}],["real",{"_index":776,"title":{},"body":{"index.html":{}}}],["reference",{"_index":524,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":572,"title":{},"body":{"injectables/UserServices.html":{}}}],["repository",{"_index":482,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UserServices.html":{},"index.html":{},"injectables/metaOptionService.html":{}}}],["request",{"_index":444,"title":{},"body":{"controllers/PostController.html":{}}}],["required",{"_index":197,"title":{},"body":{"classes/CreatePostsDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":743,"title":{},"body":{"index.html":{}}}],["reset",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":755,"title":{},"body":{"index.html":{}}}],["response",{"_index":442,"title":{},"body":{"controllers/PostController.html":{}}}],["results",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/metaOptionService.html":{},"modules.html":{},"overview.html":{},"classes/patchPostsDto.html":{},"properties.html":{}}}],["return",{"_index":93,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["returned",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"injectables/metaOptionService.html":{}}}],["review",{"_index":179,"title":{},"body":{"classes/CreatePostsDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":706,"title":{},"body":{"index.html":{}}}],["runs",{"_index":727,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["sample_token",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":695,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":233,"title":{},"body":{"classes/CreatePostsDto.html":{},"miscellaneous/enumerations.html":{}}}],["scheduled'})@isenum(poststatus",{"_index":181,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["schema",{"_index":242,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["series",{"_index":189,"title":{},"body":{"classes/CreatePostsDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":696,"title":{},"body":{"index.html":{}}}],["service",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/UserServices.html":{}}}],["setup",{"_index":703,"title":{},"body":{"index.html":{}}}],["side",{"_index":697,"title":{},"body":{"index.html":{}}}],["simple",{"_index":745,"title":{},"body":{"index.html":{}}}],["slug",{"_index":243,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["small",{"_index":256,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["soft",{"_index":528,"title":{},"body":{"entities/Tag.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"injectables/metaOptionService.html":{},"classes/patchPostsDto.html":{}}}],["spaces",{"_index":260,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["special",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["specific",{"_index":340,"title":{},"body":{"classes/GetUsersDto.html":{}}}],["sponsors",{"_index":798,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":687,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postsatus.enum.ts",{"_index":681,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":90,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":639,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":563,"title":{},"body":{"injectables/UserServices.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:17",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":652,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":349,"title":{},"body":{"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"coverage.html":{},"injectables/metaOptionService.html":{}}}],["src/post/dtos/getposts.dto.ts",{"_index":334,"title":{},"body":{"classes/GetPostsDto.html":{},"coverage.html":{}}}],["src/post/dtos/getposts.dto.ts:8",{"_index":336,"title":{},"body":{"classes/GetPostsDto.html":{}}}],["src/post/dtos/meta",{"_index":142,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"coverage.html":{},"injectables/metaOptionService.html":{}}}],["src/post/dtos/patchposts.dto.ts",{"_index":657,"title":{},"body":{"coverage.html":{},"classes/patchPostsDto.html":{}}}],["src/post/dtos/postposts.dto.ts",{"_index":155,"title":{},"body":{"classes/CreatePostsDto.html":{},"coverage.html":{}}}],["src/post/dtos/postposts.dto.ts:16",{"_index":171,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/post/dtos/postposts.dto.ts:34",{"_index":186,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/post/dtos/postposts.dto.ts:56",{"_index":191,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/post/dtos/postposts.dto.ts:63",{"_index":182,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/post/dtos/postposts.dto.ts:71",{"_index":168,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/post/dtos/postposts.dto.ts:78",{"_index":176,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/post/dtos/postposts.dto.ts:81",{"_index":194,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/post/dtos/postposts.dto.ts:90",{"_index":200,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/post/enums/postsatus.enum.ts",{"_index":683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":423,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:20",{"_index":430,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:36",{"_index":446,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:40",{"_index":435,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity.ts",{"_index":395,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:10",{"_index":398,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:13",{"_index":409,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:19",{"_index":410,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:22",{"_index":407,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:25",{"_index":397,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:28",{"_index":402,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:31",{"_index":412,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:34",{"_index":413,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:38",{"_index":404,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":475,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/providers/post.service.ts",{"_index":479,"title":{},"body":{"injectables/PostServices.html":{},"coverage.html":{}}}],["src/post/providers/post.service.ts:44",{"_index":486,"title":{},"body":{"injectables/PostServices.html":{}}}],["src/post/providers/post.service.ts:8",{"_index":483,"title":{},"body":{"injectables/PostServices.html":{}}}],["src/tags/dtos/createtags.dto.ts",{"_index":240,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/dtos/createtags.dto.ts:19",{"_index":249,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/dtos/createtags.dto.ts:29",{"_index":262,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/dtos/createtags.dto.ts:34",{"_index":245,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/dtos/createtags.dto.ts:39",{"_index":251,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/dtos/createtags.dto.ts:45",{"_index":247,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/tag.entity.ts",{"_index":508,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:13",{"_index":515,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:21",{"_index":518,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":521,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":512,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:41",{"_index":519,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":514,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:52",{"_index":510,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":522,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:59",{"_index":511,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":531,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.module.ts",{"_index":533,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/usersdtos/getuser.dto.ts",{"_index":338,"title":{},"body":{"classes/GetUsersDto.html":{},"coverage.html":{}}}],["src/users/dtos/usersdtos/getuser.dto.ts:13",{"_index":342,"title":{},"body":{"classes/GetUsersDto.html":{}}}],["src/users/dtos/usersdtos/patchuser.endpoint.ts",{"_index":388,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/usersdtos/postuser.dto",{"_index":212,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["src/users/dtos/usersdtos/postuser.dto.ts",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["src/users/dtos/usersdtos/postuser.dto.ts:13",{"_index":345,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["src/users/dtos/usersdtos/postuser.dto.ts:27",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/usersdtos/postuser.dto.ts:37",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/usersdtos/postuser.dto.ts:46",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/usersdtos/postuser.dto.ts:56",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/usersdtos/postuser.dto.ts:66",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/usersdtos/postuser.dto.ts:8",{"_index":346,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["src/users/providers/users.services",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{}}}],["src/users/providers/users.services.ts",{"_index":551,"title":{},"body":{"injectables/UserServices.html":{},"coverage.html":{}}}],["src/users/providers/users.services.ts:10",{"_index":556,"title":{},"body":{"injectables/UserServices.html":{}}}],["src/users/providers/users.services.ts:25",{"_index":560,"title":{},"body":{"injectables/UserServices.html":{}}}],["src/users/providers/users.services.ts:33",{"_index":558,"title":{},"body":{"injectables/UserServices.html":{}}}],["src/users/user.entity",{"_index":417,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":537,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:10",{"_index":546,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:13",{"_index":548,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:16",{"_index":544,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":549,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:22",{"_index":542,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":547,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:35",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":637,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":707,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":710,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":712,"title":{},"body":{"index.html":{}}}],["started",{"_index":689,"title":{"index.html":{}},"body":{}}],["starter",{"_index":701,"title":{},"body":{"index.html":{}}}],["statements",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":443,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":783,"title":{},"body":{"index.html":{}}}],["steps",{"_index":724,"title":{},"body":{"index.html":{}}}],["story",{"_index":188,"title":{},"body":{"classes/CreatePostsDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":741,"title":{},"body":{"index.html":{}}}],["string",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["structure",{"_index":538,"title":{},"body":{"entities/User.html":{}}}],["successfull",{"_index":467,"title":{},"body":{"controllers/PostController.html":{}}}],["successfull'})@post",{"_index":445,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":465,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":762,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":824,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":539,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":57,"title":{"entities/Tag.html":{}},"body":{"modules/AppModule.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tag.entity",{"_index":535,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags",{"_index":162,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":534,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tag.entity",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":530,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":36,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["take",{"_index":725,"title":{},"body":{"index.html":{}}}],["test",{"_index":715,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":718,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":717,"title":{},"body":{"index.html":{}}}],["tests",{"_index":713,"title":{},"body":{"index.html":{}}}],["text",{"_index":396,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":797,"title":{},"body":{"index.html":{}}}],["this.metaoptionsservice.createmetaoptions(metaoptionsdto",{"_index":380,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.metarepository.create(createmetaoptions",{"_index":821,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["this.metarepository.save(metaoption",{"_index":822,"title":{},"body":{"injectables/metaOptionService.html":{}}}],["this.postrepository.create(createposts",{"_index":506,"title":{},"body":{"injectables/PostServices.html":{}}}],["this.postrepository.exists",{"_index":503,"title":{},"body":{"injectables/PostServices.html":{}}}],["this.postrepository.save(newpost",{"_index":507,"title":{},"body":{"injectables/PostServices.html":{}}}],["this.postserices.createpost(createposts",{"_index":469,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postserices.findallposts(getpostsdto",{"_index":464,"title":{},"body":{"controllers/PostController.html":{}}}],["this.userrepository.create(createuserdto",{"_index":581,"title":{},"body":{"injectables/UserServices.html":{}}}],["this.userrepository.delete({id",{"_index":574,"title":{},"body":{"injectables/UserServices.html":{}}}],["this.userrepository.find",{"_index":570,"title":{},"body":{"injectables/UserServices.html":{}}}],["this.userrepository.findone",{"_index":575,"title":{},"body":{"injectables/UserServices.html":{}}}],["this.userrepository.findoneby({id",{"_index":571,"title":{},"body":{"injectables/UserServices.html":{}}}],["this.userrepository.save(newuser",{"_index":582,"title":{},"body":{"injectables/UserServices.html":{}}}],["this.userservice.findonebyid(22",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.createuser(createuserdto",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservices.findall(getusersdto",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservices.findonebyid(4",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservices.findonebyid(6",{"_index":462,"title":{},"body":{"controllers/PostController.html":{}}}],["time",{"_index":777,"title":{},"body":{"index.html":{}}}],["title",{"_index":184,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["title'})@isstring()@minlength(4)@maxlength(98",{"_index":185,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["touch",{"_index":805,"title":{},"body":{"index.html":{}}}],["transform",{"_index":222,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["transformer",{"_index":201,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"dependencies.html":{}}}],["true",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostsDto.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["twitter",{"_index":811,"title":{},"body":{"index.html":{}}}],["type",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"coverage.html":{},"injectables/metaOptionService.html":{}}}],["typeorm",{"_index":365,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"dependencies.html":{},"injectables/metaOptionService.html":{}}}],["typeormmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":386,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":478,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":536,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":640,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":393,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/patchPostsDto.html":{}}}],["typescript",{"_index":700,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":406,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":199,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["unique",{"_index":517,"title":{},"body":{"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":714,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":487,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UserServices.html":{},"injectables/metaOptionService.html":{}}}],["unlicensed",{"_index":833,"title":{},"body":{"properties.html":{}}}],["updatedate",{"_index":352,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":361,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updates",{"_index":785,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["uppercase'})@isstring()@maxlength(20)@matches(/^(?=.*[!@#$%^&])(?=.*[a",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":268,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["url\"'})@maxlength(512",{"_index":261,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["use",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":49,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/User.html":{},"injectables/UserServices.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.entity",{"_index":564,"title":{},"body":{"injectables/UserServices.html":{},"modules/UsersModule.html":{}}}],["user.id",{"_index":419,"title":{},"body":{"entities/Post.html":{}}}],["userdto",{"_index":221,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["userentity",{"_index":566,"title":{},"body":{"injectables/UserServices.html":{}}}],["username",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":555,"title":{},"body":{"injectables/UserServices.html":{}}}],["users",{"_index":217,"title":{},"body":{"classes/CreatePostsDto.html":{},"controllers/PostController.html":{},"injectables/PostServices.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":638,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":583,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["userservices",{"_index":102,"title":{"injectables/UserServices.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/UserServices.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":37,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":258,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["using",{"_index":778,"title":{},"body":{"index.html":{}}}],["validate",{"_index":219,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validate(confirmpassword",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validate(matchpasswordsconstraint",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatenested",{"_index":218,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["validation",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validationarguments",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validator",{"_index":153,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersDto.html":{},"classes/MatchPasswordsConstraint.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["value",{"_index":684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["varchar",{"_index":399,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["version",{"_index":831,"title":{},"body":{"properties.html":{}}}],["video",{"_index":770,"title":{},"body":{"index.html":{}}}],["visit",{"_index":759,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":773,"title":{},"body":{"index.html":{}}}],["void",{"_index":431,"title":{},"body":{"controllers/PostController.html":{}}}],["want",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":708,"title":{},"body":{"index.html":{}}}],["website",{"_index":809,"title":{},"body":{"index.html":{}}}],["without",{"_index":259,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["working",{"_index":758,"title":{},"body":{"index.html":{}}}],["world",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":787,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":801,"title":{},"body":{"index.html":{}}}],["you'll",{"_index":441,"title":{},"body":{"controllers/PostController.html":{}}}],["you're",{"_index":719,"title":{},"body":{"index.html":{}}}],["you\\'ll",{"_index":466,"title":{},"body":{"controllers/PostController.html":{}}}],["z0",{"_index":253,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[0",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[a",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["za",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["zoom",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                entire App controller\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/** entire App controller */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { Post } from './post/post.entity';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsModule } from './tags/tags.module';\nimport { Tag } from './tags/tag.entity';\n\n@Module({\n  imports: [UsersModule,\n    PostModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n    useFactory: () => ({\n    type: 'postgres',\n    host: 'localhost',\n    port: 5432,\n    username: 'postgres',\n    password: 'password',\n    database: 'blog',\n    entities: [User, Post],\n    import: [],\n    inject: [],\n    synchronize: true, //only use 'true' during development\n    autoLoadEntities: true\n    })\n  }),\n    TagsModule,\n    MetaOptionsModule,],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                this getHello function is no longer in part of the code\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/** this getHello function is no longer in part of the code */\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { UserServices } from 'src/users/Providers/users.services';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        // injecting auth service\n        private readonly authservice: AuthService,\n    ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [forwardRef(() => UsersModule)],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserServices)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserServices } from 'src/users/Providers/users.services';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        // injecting user service\n        @Inject(forwardRef(() => UserServices))\n        private readonly userService: UserServices\n    ) {}\n    public login(email: string, password: string, id: number) {\n        // check if user exist in db\n        const user = this.userService.FindOneById(22)\n        // login\n        return 'sample_token'\n    }\n    public isAuth() {\n        return true\n    }    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/meta-optionsDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/meta-optionsDto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostsDto.html":{"url":"classes/CreatePostsDto.html","title":"class - CreatePostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/postPosts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                postStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postTitle\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedDate\n                            \n                            \n                                    \n                                    \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'this is the main body of the post', description: 'this contains the main body of the post'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/postPosts.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'this contains id of a post'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/postPosts.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://image_url', description: 'a link to image if available'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/postPosts.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        postStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'post must be a draft, review, published or scheduled'})@IsEnum(postStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/postPosts.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Post Title 1', description: 'This is a post title'})@IsString()@MinLength(4)@MaxLength(98)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/postPosts.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: postType, description: 'post must be a story, post, series or page'})@IsEnum(postType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/postPosts.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/postPosts.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: true, example: undefined})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/postPosts.dto.ts:90\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\"\nimport { IsArray, IsEmpty, IsEnum, IsInt, IsISO8601, IsNotEmpty, IsNumber, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\"\nimport { postType } from \"../enums/postType.enum\"\nimport { postStatus } from \"../enums/postSatus.enum\"\nimport { CreateUserDto } from \"src/users/dtos/usersDtos/postUser.dto\"\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\"\n\nexport class CreatePostsDto {\n    @ApiProperty({\n        example: 1,\n        description: \"this contains id of a post\"\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number\n\n    // @IsArray()\n    // @IsString({ each: true })\n    // users: []\n\n    // IsArray()\n    // @ValidateNested({ each: true }) // Validate each item in the array\n    // @Type(() => UserDto) // Transform each array item into a UserDto instance (create UserDto)\n    // users: UserDto[];\n\n    @ApiPropertyOptional({\n        example: \"Post Title 1\",\n        description: \"This is a post title\"\n})\n    @IsString()\n    @MinLength(4)\n    @MaxLength(98)\n    postTitle: string\n\n    // @ApiPropertyOptional({\n    //     type: CreateUserDto,\n    //     required: false,\n    // })\n    // @IsEnum(CreateUserDto)\n    // @IsOptional()\n    // @Type(() => CreateUserDto)\n    // authur: CreateUserDto\n\n    // @IsNumber()\n    // @Type(() => Number)\n    // authur: number;\n\n\n    @ApiPropertyOptional({\n        enum: postType,\n        description: \"post must be a story, post, series or page\"\n    })\n    @IsEnum(postType)\n    @IsOptional()\n    postType: postType\n\n    @ApiProperty({\n        enum: postStatus,\n        description: \"post must be a draft, review, published or scheduled\"\n    })\n    @IsEnum(postStatus)\n    postStatus: postStatus\n\n    @ApiProperty({\n    example: \"this is the main body of the post\",\n    description: \"this contains the main body of the post\"\n    })\n    @IsString()\n    @IsNotEmpty()\n    content: String\n\n    @ApiProperty({\n        example: \"https://image_url\",\n        description: \"a link to image if available\"\n    })\n    @IsNotEmpty()\n    imageUrl: string\n\n    @IsISO8601()\n    publishedDate: Date\n\n    @ApiPropertyOptional({\n        type: 'array',\n        required: true,\n        example: [\"#java\", \"#php\"],\n})\n    @IsArray()\n    @IsString({each: true})\n    tags: string[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/createTags.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/createTags.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/createTags.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/createTags.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/createTags.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/createTags.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/usersDtos/postUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'password should containg number, alphabets and uppercase and should be same as the password'})@IsString()@MaxLength(20)@Validate(MatchPasswordsConstraint)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/usersDtos/postUser.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'fatima.aminu@mail.com', description: 'email field'})@IsEmail()@MaxLength(150)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/usersDtos/postUser.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Fatima', description: 'first name field'})@IsString()@IsNotEmpty()@MaxLength(90)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/usersDtos/postUser.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Aminu', description: 'last name field'})@IsString()@IsOptional()@MaxLength(90)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/usersDtos/postUser.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'password should containg number, alphabets and uppercase'})@IsString()@MaxLength(20)@Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/usersDtos/postUser.dto.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, maxLength, Validate, ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from \"class-validator\";\n\n// custum validation to compare passwords\n\n@ValidatorConstraint({ name: \"MatchPasswords\", async: false })\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return \"Password and confirm password do not match\";\n  }\n}\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'first name field'\n  })\n    @IsString()\n    @IsNotEmpty()\n    @MaxLength(90)\n    firstname: string;\n\n    @ApiProperty({\n      type: 'string',\n      example: 'Aminu',\n      description: 'last name field'\n    })\n    @IsString()\n    @IsOptional()\n    @MaxLength(90)\n    lastname: string;\n\n    @ApiProperty({\n      type: 'string',\n      example: 'fatima.aminu@mail.com',\n      description: 'email field'\n    })\n    @IsEmail()\n    @MaxLength(150)\n    email: string;\n\n    @ApiProperty({\n      type: 'string',\n      example: '@Password123',\n      description: 'password should containg number, alphabets and uppercase'\n    })\n    @IsString()\n    @MaxLength(20)\n    @Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n    password: string;\n\n    @ApiProperty({\n      type: 'string',\n      example: '@Password123',\n      description: 'password should containg number, alphabets and uppercase and should be same as the password'\n    })\n    @IsString()\n    @MaxLength(20)\n    @Validate(MatchPasswordsConstraint)\n    confirmPassword: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto.html":{"url":"classes/GetPostsDto.html","title":"class - GetPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/getPosts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/getPosts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetPostsDto {\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: Number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersDto.html":{"url":"classes/GetUsersDto.html","title":"class - GetUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/usersDtos/getUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/usersDtos/getUser.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersDto {\n    @ApiPropertyOptional({\n        description: \"Get user with a specific id\",\n        example: 1234\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: Number \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchPasswordsConstraint.html":{"url":"classes/MatchPasswordsConstraint.html","title":"class - MatchPasswordsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchPasswordsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/usersDtos/postUser.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/dtos/usersDtos/postUser.dto.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(confirmPassword: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/dtos/usersDtos/postUser.dto.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, maxLength, Validate, ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from \"class-validator\";\n\n// custum validation to compare passwords\n\n@ValidatorConstraint({ name: \"MatchPasswords\", async: false })\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return \"Password and confirm password do not match\";\n  }\n}\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'first name field'\n  })\n    @IsString()\n    @IsNotEmpty()\n    @MaxLength(90)\n    firstname: string;\n\n    @ApiProperty({\n      type: 'string',\n      example: 'Aminu',\n      description: 'last name field'\n    })\n    @IsString()\n    @IsOptional()\n    @MaxLength(90)\n    lastname: string;\n\n    @ApiProperty({\n      type: 'string',\n      example: 'fatima.aminu@mail.com',\n      description: 'email field'\n    })\n    @IsEmail()\n    @MaxLength(150)\n    email: string;\n\n    @ApiProperty({\n      type: 'string',\n      example: '@Password123',\n      description: 'password should containg number, alphabets and uppercase'\n    })\n    @IsString()\n    @MaxLength(20)\n    @Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n    password: string;\n\n    @ApiProperty({\n      type: 'string',\n      example: '@Password123',\n      description: 'password should containg number, alphabets and uppercase and should be same as the password'\n    })\n    @IsString()\n    @MaxLength(20)\n    @Validate(MatchPasswordsConstraint)\n    confirmPassword: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    DeleteDateColumn,\n    Entity,\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n  } from 'typeorm';\n  \n  @Entity()\n  export class MetaOption {\n    @PrimaryGeneratedColumn()\n    id: number;\n  \n    @Column({\n      type: 'json',\n      nullable: false,\n    })\n    metaValue: string;\n  \n    @CreateDateColumn()\n    createDate: Date;\n  \n    @UpdateDateColumn()\n    updateDate: Date;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                metaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        metaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    metaOptions(metaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                metaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from 'src/post/dtos/meta-optionsDto';\nimport { metaOptionService } from './provider/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n    constructor(\n        private readonly metaOptionsService: metaOptionService\n    ) {}\n    @Post() \n    public metaOptions(@Body() metaOptionsDto: CreatePostMetaOptionsDto) {\n        return this.metaOptionsService.createMetaOptions(metaOptionsDto)\n    } \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nmetaOptionService\n\nmetaOptionService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nmetaOptionService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            metaOptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-options.entity';\nimport { metaOptionService } from './provider/meta-options.service';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([MetaOption])],\n    controllers: [MetaOptionsController],\n    providers: [metaOptionService]\n})\nexport class MetaOptionsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/usersDtos/patchUser.endpoint.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./postUser.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                metaOption\n                            \n                            \n                                    \n                                postStatus\n                            \n                            \n                                    \n                                postTitle\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedDate\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        metaOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('timestamp')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { postType } from \"./enums/postType.enum\";\nimport { postStatus } from \"./enums/postSatus.enum\";\nimport { User } from \"src/users/user.entity\";\nimport { MetaOption } from \"src/meta-options/meta-options.entity\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column(\"simple-array\")\n    postTitle: string\n\n    // @ManyToOne(() => User, (user) => user.id)\n    // authur: User\n\n    @Column({ type: 'enum', enum: postType, default: postType.PAGE })\n    postType: postType\n\n    @Column({ type: 'enum', enum: postStatus, default: postStatus.DRAFT })\n    postStatus: postStatus\n\n    @Column({ type: 'text' })\n    content: String\n\n    @Column({ type: 'varchar', length: 255 })\n    imageUrl: string\n\n    @Column('timestamp')\n    publishedDate: Date\n\n    @Column('simple-array')\n    tags: string[]\n\n    @OneToOne(() => MetaOption)\n    @JoinColumn()\n    metaOption?: MetaOption\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    Public\n                                patchPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                postPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(getPostsDto: GetPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getPostsDto\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchPosts(patchPosts: patchPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPosts\n                                            \n                                                            patchPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         patchPostsDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        postPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    postPosts(createPosts: CreatePostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'this creates your posts'})@ApiResponse({status: 200, description: 'You'll get a 200 response status if your request is successfull'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPosts\n                                            \n                                                            CreatePostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostServices } from './Providers/post.service';\nimport { GetPostsDto } from './dtos/getPosts.dto';\nimport { UserServices } from 'src/users/Providers/users.services';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostsDto } from './dtos/postPosts.dto';\nimport { patchPostsDto } from './dtos/patchPosts.dto';\n\n@ApiTags()\n@Controller('posts')\nexport class PostController {\n    constructor(\n        // injecting post service\n        private readonly postSerices: PostServices,\n        // injecting users service\n        private readonly userServices: UserServices\n    ) {}\n\n    @Get('/:id?')\n    public getPosts(@Param() getPostsDto: GetPostsDto) {\n\n        // Find the user data\n        const user = this.userServices.FindOneById(6)\n\n        // Pass the user data to PostServices\n        // return this.postSerices.findAllPosts(getPostsDto, user)\n    }\n    @ApiOperation({\n        summary: 'this creates your posts'\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'You\\'ll get a 200 response status if your request is successfull'\n    })\n    @Post()\n    public postPosts(@Body() createPosts: CreatePostsDto) {\n        return this.postSerices.createPost(createPosts)\n    }\n    @Patch()\n    public patchPosts(@Body() patchPosts: patchPostsDto) {\n        return patchPosts\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostServices \n\nPostServices \n\nPostServices  -->\n\nPostModule->PostServices \n\n\n\n\n\nPostServices\n\nPostServices\n\nPostModule -->\n\nPostServices->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostServices\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostServices\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostServices } from './Providers/post.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\n\n@Module({\n  imports: [UsersModule, TypeOrmModule.forFeature([Post])],\n  controllers: [PostController],\n  providers: [PostServices],\n  exports: [PostServices]\n})\nexport class PostModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostServices.html":{"url":"injectables/PostServices.html","title":"injectable - PostServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/Providers/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/post/Providers/post.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPosts: CreatePostsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/Providers/post.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPosts\n                                            \n                                                            CreatePostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { Post } from \"../post.entity\";\nimport { CreatePostsDto } from \"../dtos/postPosts.dto\";\n\n@Injectable()\nexport class PostServices {\n    // public findAllPosts(getPostsDto: GetPostsDto, users: {}) {\n    //     return [\n    //     {\n    //         id: '1',\n    //         users: users,\n    //         postTitle: 'Post 1',\n    //         body: 'This returns the body content of post 1',\n    //         likes: 2,\n    //         date: 2000-12-27\n    //     },\n    //     {\n    //         id: '2',\n    //         users: users,\n    //         postTitle: 'Post 1',\n    //         body: 'This returns the body content of post 1',\n    //         likes: 9,\n    //         date: 2011-1-10\n    //     },\n    //     {\n    //         id: '3',\n    //         users: users,\n    //         postTitle: 'Post 1',\n    //         body: 'This returns the body content of post 1',\n    //         likes: 5,\n    //         date: 2003-5-9\n    //     }]\n    // }\n\n    constructor(\n        // injecting post entity\n        @InjectRepository(Post)\n        private readonly postRepository: Repository\n\n    ) {}\n\n    public async createPost(createPosts: CreatePostsDto) {\n        const extinguisher = await this.postRepository.exists({\n            // check if post date\n        where: {publishedDate: createPosts.publishedDate}\n    })\n\n        let newPost = this.postRepository.create(createPosts)\n        newPost =  await this.postRepository.save(newPost)\n        return newPost\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    DeleteDateColumn,\n    Entity,\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n  } from 'typeorm';\n  \n  @Entity()\n  export class Tag {\n    @PrimaryGeneratedColumn()\n    id: string;\n  \n    @Column({\n      type: 'varchar',\n      length: 256,\n      nullable: false,\n      unique: true,\n    })\n    name: string;\n  \n    @Column({\n      type: 'varchar',\n      length: 512,\n      nullable: false,\n      unique: true,\n    })\n    slug: string;\n  \n    @Column({\n      type: 'text',\n      nullable: true,\n    })\n    description: string;\n  \n    @Column({\n      type: 'text',\n      nullable: true,\n    })\n    schema: string;\n  \n    @Column({\n      type: 'varchar',\n      length: 1024,\n      nullable: true,\n    })\n    featuredImage: string;\n  \n    // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n    @CreateDateColumn()\n    createDate: Date;\n  \n    @UpdateDateColumn()\n    updateDate: Date;\n  \n    // Add this decorartor and column enables soft delete\n    @DeleteDateColumn()\n    deletedAt: Date;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('tags')\nexport class TagsController {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController]\n})\nexport class TagsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                this is the structure of the users table\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstname\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastname\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 20, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 150, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 90, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 90, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n/** this is the structure of the users table */ \n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column(\"varchar\", {length: 90, nullable: false})\n    firstname: string;\n\n    @Column(\"varchar\", {length: 90, nullable: true})\n    lastname: string;\n\n    @Column(\"varchar\", {length: 150, nullable: false, unique: true})\n    email: string;\n\n    @Column(\"varchar\", {length: 20})\n    password: string;\n\n    @Column(\"varchar\", {length: 20, nullable: false})\n    confirmPassword: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserServices.html":{"url":"injectables/UserServices.html","title":"injectable - UserServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/Providers/users.services.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                CreateUser\n                            \n                            \n                                    Public\n                                FindOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/Providers/users.services.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreateUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/Providers/users.services.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        FindOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    FindOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/Providers/users.services.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from \"@nestjs/common\";\nimport { GetUsersDto } from \"../dtos/usersDtos/getUser.dto\";\nimport { AuthService } from \"src/auth/providers/auth.service\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"../user.entity\";\nimport { Repository } from \"typeorm\";\nimport { CreateUserDto } from \"../dtos/usersDtos/postUser.dto\";\n\n@Injectable()\nexport class UserServices {\n    constructor(\n        // injecting auth service\n        @Inject(forwardRef(() => AuthService))\n        private readonly authService: AuthService,\n\n        // injecting userEntity\n        @InjectRepository(User)\n        private userRepository: Repository\n    ) {}\n\n    // public FindAll(getUsersDto: GetUsersDto, limit: number, page: number): Promise {\n    //     return this.userRepository.find()\n    // }\n\n    public FindOneById(id: number): Promise {\n        return this.userRepository.findOneBy({id});\n    }\n\n    // public async remove(id: number):Promise {\n    //     await this.userRepository.delete({id})\n    // }\n\n    public async CreateUser(createUserDto: CreateUserDto) {\n        const extinguisher = await this.userRepository.findOne({\n            // check if user already exist\n        where: {email: createUserDto.email}\n    })\n    // Handle Error\n    // Create the user\n    let newUser = this.userRepository.create(createUserDto)\n    newUser = await this.userRepository.save(newUser)\n    return newUser\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                            \n                                    \n                                    Public\n                                postUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersDto: GetUsersDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches the list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fethched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'the number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'the position of the page number you want to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersDto\n                                            \n                                                            GetUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        postUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    postUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Headers, Param, ParseIntPipe, Patch, Post, Query } from \"@nestjs/common\";\nimport { CreateUserDto } from \"./dtos/usersDtos/postUser.dto\";\nimport { PatchUserDto } from \"./dtos/usersDtos/patchUser.endpoint\";\nimport { UserServices } from \"./Providers/users.services\";\nimport { GetUsersDto } from \"./dtos/usersDtos/getUser.dto\";\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { query } from \"express\";\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n    constructor(private readonly userServices: UserServices) {}\n    @Get('/:id?')\n    @ApiOperation({\n        summary: 'Fetches the list of registered users on the application'\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'Users fethched successfully based on the query'\n    })\n    @ApiQuery({\n        name: 'limit',\n        type: 'number',\n        required: false,\n        description: 'the number of entries returned per query',\n        example: 10\n    })\n    @ApiQuery({\n        name: 'page',\n        type: 'number',\n        required: false,\n        description: 'the position of the page number you want to return',\n        example: 1\n    })\n    public getUsers(@Param() getUsersDto: GetUsersDto, @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number) {\n        // return this.userServices.FindAll(getUsersDto, limit, page)\n        return this.userServices.FindOneById(4)\n    }\n    @Post()\n    public postUsers(@Body() createUserDto: CreateUserDto,\n    // @Headers() headers: any\n) {\n        console.log(createUserDto instanceof CreateUserDto)\n        // console.log(headers)\n        return this.userServices.CreateUser(createUserDto)\n    }\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return patchUserDto\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserServices \n\nUserServices \n\n\n\nUsersModule\n\nUsersModule\n\nUserServices  -->\n\nUsersModule->UserServices \n\n\n\n\n\nUserServices\n\nUserServices\n\nUsersModule -->\n\nUserServices->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserServices\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserServices\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from \"@nestjs/common\";\nimport { UsersController } from \"./users.controller\";\nimport { UserServices } from \"./Providers/users.services\";\nimport { AuthModule } from \"src/auth/auth.module\";\nimport { User } from \"./user.entity\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\n@Module({\n    imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n    controllers: [UsersController],\n    providers: [UserServices],\n    exports: [UserServices],\n})\n\nexport class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/provider/meta-options.service.ts\n            \n            injectable\n            metaOptionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/Providers/post.service.ts\n            \n            injectable\n            PostServices\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/getPosts.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/dtos/meta-optionsDto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/dtos/patchPosts.dto.ts\n            \n            class\n            patchPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/postPosts.dto.ts\n            \n            class\n            CreatePostsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/dtos/createTags.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/Providers/users.services.ts\n            \n            injectable\n            UserServices\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/usersDtos/getUser.dto.ts\n            \n            class\n            GetUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/usersDtos/patchUser.endpoint.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/usersDtos/postUser.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/usersDtos/postUser.dto.ts\n            \n            class\n            MatchPasswordsConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postSatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/post/enums/postSatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/metaOptionService.html":{"url":"injectables/metaOptionService.html","title":"injectable - metaOptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  metaOptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/provider/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/provider/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptions: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/provider/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptions\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { MetaOption } from \"../meta-options.entity\";\nimport { CreatePostMetaOptionsDto } from \"src/post/dtos/meta-optionsDto\";\n\n@Injectable()\nexport class metaOptionService {\n    constructor(\n        // injecting the metaoption entity\n        @InjectRepository(MetaOption)\n        private readonly metaRepository: Repository\n    ) {}\n\n    public async createMetaOptions(createMetaOptions: CreatePostMetaOptionsDto) {\n        const metaOption = this.metaRepository.create(createMetaOptions)\n\n        return await this.metaRepository.save(metaOption)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPostServices \n\nPostServices \n\nPostServices  -->\n\nPostModule->PostServices \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserServices \n\nUserServices \n\nUserServices  -->\n\nUsersModule->UserServices \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nmetaOptionService\n\nmetaOptionService\n\nMetaOptionsModule -->\n\nmetaOptionService->MetaOptionsModule\n\n\n\n\n\nPostServices\n\nPostServices\n\nPostModule -->\n\nPostServices->PostModule\n\n\n\n\n\nUserServices\n\nUserServices\n\nUsersModule -->\n\nUserServices->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/patchPostsDto.html":{"url":"classes/patchPostsDto.html","title":"class - patchPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  patchPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patchPosts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostsDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreatePostsDto } from \"./postPosts.dto\";\n\nexport class patchPostsDto extends PartialType(CreatePostsDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
